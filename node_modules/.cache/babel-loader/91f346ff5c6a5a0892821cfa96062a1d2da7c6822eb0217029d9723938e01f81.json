{"ast":null,"code":"var _jsxFileName = \"D:\\\\task\\\\my-react-app\\\\src\\\\pages\\\\EditTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { editTaskInAPI } from \"../redux/taskslice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditTask = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the task ID from the URL\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  // Fetch the task from the Redux store\n  const task = useSelector(state => state.tasks.list.find(task => task.id === parseInt(id)));\n  const [completed, setCompleted] = useState((task === null || task === void 0 ? void 0 : task.completed) || false);\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Dispatch the updated task to the Redux store\n    dispatch(editTaskInAPI({\n      id: task.id,\n      task: {\n        ...task,\n        completed\n      }\n    })).unwrap().then(() => {\n      navigate(\"/\"); // Redirect back to the home page\n    }).catch(error => {\n      console.error(\"Error updating task:\", error);\n    });\n  };\n  if (!task) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Task not found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"status\",\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"status\",\n        value: completed,\n        onChange: e => setCompleted(e.target.value === \"true\"),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"true\",\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"false\",\n          children: \"Pending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(EditTask, \"mgvI2a1Zjv8VQ+VrP5hO61bGFik=\", false, function () {\n  return [useParams, useDispatch, useNavigate, useSelector];\n});\n_c = EditTask;\nexport default EditTask;\nvar _c;\n$RefreshReg$(_c, \"EditTask\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","useParams","useNavigate","editTaskInAPI","jsxDEV","_jsxDEV","EditTask","_s","id","dispatch","navigate","task","state","tasks","list","find","parseInt","completed","setCompleted","handleSubmit","e","preventDefault","unwrap","then","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","htmlFor","value","onChange","target","type","_c","$RefreshReg$"],"sources":["D:/task/my-react-app/src/pages/EditTask.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { editTaskInAPI } from \"../redux/taskslice\";\r\n\r\nconst EditTask = () => {\r\n  const { id } = useParams(); // Get the task ID from the URL\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  // Fetch the task from the Redux store\r\n  const task = useSelector((state) =>\r\n    state.tasks.list.find((task) => task.id === parseInt(id))\r\n  );\r\n\r\n  const [completed, setCompleted] = useState(task?.completed || false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Dispatch the updated task to the Redux store\r\n    dispatch(editTaskInAPI({ id: task.id, task: { ...task, completed } }))\r\n      .unwrap()\r\n      .then(() => {\r\n        navigate(\"/\"); // Redirect back to the home page\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error updating task:\", error);\r\n      });\r\n  };\r\n\r\n  if (!task) {\r\n    return <p>Task not found!</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Edit Task</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"status\">Status:</label>\r\n        <select\r\n          id=\"status\"\r\n          value={completed}\r\n          onChange={(e) => setCompleted(e.target.value === \"true\")}\r\n        >\r\n          <option value=\"true\">Completed</option>\r\n          <option value=\"false\">Pending</option>\r\n        </select>\r\n        <button type=\"submit\">Save Changes</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditTask;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}