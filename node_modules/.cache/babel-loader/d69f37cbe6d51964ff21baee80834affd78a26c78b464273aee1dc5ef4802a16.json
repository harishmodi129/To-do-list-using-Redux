{"ast":null,"code":"var _jsxFileName = \"D:\\\\task\\\\my-react-app\\\\src\\\\pages\\\\EditTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateTask } from \"../redux/taskslice\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditTaskPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const task = useSelector(state => state.tasks.tasks.find(task => task.id === parseInt(id)));\n  const [updatedTask, setUpdatedTask] = useState(task || {});\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await dispatch(updateTask(updatedTask)).unwrap(); // Wait for the API call to complete\n      navigate(\"/\");\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n  if (!task) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Task not found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: updatedTask.title,\n        onChange: e => setUpdatedTask({\n          ...updatedTask,\n          title: e.target.value\n        }),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Completed:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: updatedTask.completed,\n          onChange: e => setUpdatedTask({\n            ...updatedTask,\n            completed: e.target.checked\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(EditTaskPage, \"zJum+HWXe6cmmBizya3UPOMfKjg=\", false, function () {\n  return [useParams, useSelector, useDispatch, useNavigate];\n});\n_c = EditTaskPage;\nexport default EditTaskPage;\nvar _c;\n$RefreshReg$(_c, \"EditTaskPage\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","updateTask","useNavigate","useParams","jsxDEV","_jsxDEV","EditTaskPage","_s","id","task","state","tasks","find","parseInt","updatedTask","setUpdatedTask","dispatch","navigate","handleSubmit","e","preventDefault","unwrap","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","title","onChange","target","required","checked","completed","_c","$RefreshReg$"],"sources":["D:/task/my-react-app/src/pages/EditTask.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateTask } from \"../redux/taskslice\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nconst EditTaskPage = () => {\r\n  const { id } = useParams();\r\n  const task = useSelector((state) =>\r\n    state.tasks.tasks.find((task) => task.id === parseInt(id))\r\n  );\r\n  const [updatedTask, setUpdatedTask] = useState(task || {});\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await dispatch(updateTask(updatedTask)).unwrap(); // Wait for the API call to complete\r\n      navigate(\"/\");\r\n    } catch (error) {\r\n      console.error(\"Error updating task:\", error);\r\n    }\r\n  };\r\n\r\n  if (!task) return <p>Task not found.</p>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Edit Task</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={updatedTask.title}\r\n          onChange={(e) =>\r\n            setUpdatedTask({ ...updatedTask, title: e.target.value })\r\n          }\r\n          required\r\n        />\r\n        <label>\r\n          Completed:\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={updatedTask.completed}\r\n            onChange={(e) =>\r\n              setUpdatedTask({ ...updatedTask, completed: e.target.checked })\r\n            }\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Update Task</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditTaskPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}