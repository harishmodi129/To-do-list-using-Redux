{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    list: [],\n    loading: false,\n    error: null\n  },\n  reducers: {\n    setTasks(state, action) {\n      state.list = action.payload;\n    },\n    addTask(state, action) {\n      if (!state.list.some(task => task.id === action.payload.id)) {\n        state.list.push(action.payload);\n      }\n    },\n    updateTask(state, action) {\n      const index = state.list.findIndex(task => task.id === action.payload.id);\n      if (index >= 0) {\n        state.list[index] = action.payload;\n      } else {\n        console.error(`Task with id ${action.payload.id} not found`);\n      }\n    },\n    deleteTask(state, action) {\n      state.list = state.list.filter(task => task.id !== action.payload.id);\n    }\n  }\n});\nexport const {\n  setTasks,\n  addTask,\n  updateTask,\n  deleteTask\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","tasksSlice","name","initialState","list","loading","error","reducers","setTasks","state","action","payload","addTask","some","task","id","push","updateTask","index","findIndex","console","deleteTask","filter","actions","reducer"],"sources":["D:/task/my-react-app/src/redux/taskslice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: { list: [], loading: false, error: null },\r\n  reducers: {\r\n    setTasks(state, action) {\r\n      state.list = action.payload;\r\n    },\r\n    addTask(state, action) {\r\n      if (!state.list.some((task) => task.id === action.payload.id)) {\r\n        state.list.push(action.payload);\r\n      }\r\n    },\r\n    updateTask(state, action) {\r\n      const index = state.list.findIndex(\r\n        (task) => task.id === action.payload.id\r\n      );\r\n      if (index >= 0) {\r\n        state.list[index] = action.payload;\r\n      } else {\r\n        console.error(`Task with id ${action.payload.id} not found`);\r\n      }\r\n    },\r\n    deleteTask(state, action) {\r\n      state.list = state.list.filter((task) => task.id !== action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setTasks, addTask, updateTask, deleteTask } = tasksSlice.actions;\r\n\r\nexport default tasksSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,UAAU,GAAGD,WAAW,CAAC;EAC7BE,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEC,OAAO,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAK,CAAC;EACvDC,QAAQ,EAAE;IACRC,QAAQA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACtBD,KAAK,CAACL,IAAI,GAAGM,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDC,OAAOA,CAACH,KAAK,EAAEC,MAAM,EAAE;MACrB,IAAI,CAACD,KAAK,CAACL,IAAI,CAACS,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACC,OAAO,CAACI,EAAE,CAAC,EAAE;QAC7DN,KAAK,CAACL,IAAI,CAACY,IAAI,CAACN,MAAM,CAACC,OAAO,CAAC;MACjC;IACF,CAAC;IACDM,UAAUA,CAACR,KAAK,EAAEC,MAAM,EAAE;MACxB,MAAMQ,KAAK,GAAGT,KAAK,CAACL,IAAI,CAACe,SAAS,CAC/BL,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACC,OAAO,CAACI,EACvC,CAAC;MACD,IAAIG,KAAK,IAAI,CAAC,EAAE;QACdT,KAAK,CAACL,IAAI,CAACc,KAAK,CAAC,GAAGR,MAAM,CAACC,OAAO;MACpC,CAAC,MAAM;QACLS,OAAO,CAACd,KAAK,CAAC,gBAAgBI,MAAM,CAACC,OAAO,CAACI,EAAE,YAAY,CAAC;MAC9D;IACF,CAAC;IACDM,UAAUA,CAACZ,KAAK,EAAEC,MAAM,EAAE;MACxBD,KAAK,CAACL,IAAI,GAAGK,KAAK,CAACL,IAAI,CAACkB,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACC,OAAO,CAACI,EAAE,CAAC;IACzE;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEP,QAAQ;EAAEI,OAAO;EAAEK,UAAU;EAAEI;AAAW,CAAC,GAAGpB,UAAU,CAACsB,OAAO;AAE/E,eAAetB,UAAU,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}