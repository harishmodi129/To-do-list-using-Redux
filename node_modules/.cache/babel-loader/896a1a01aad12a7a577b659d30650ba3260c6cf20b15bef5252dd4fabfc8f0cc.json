{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst API_URL = \"https://jsonplaceholder.typicode.com/todos\";\n\n// Fetch tasks from the dummy API\nexport const fetchTasksFromAPI = createAsyncThunk(\"tasks/fetchTasks\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data.slice(0, 10); // Fetch first 10 tasks\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    list: [],\n    loading: false,\n    error: null\n  },\n  reducers: {\n    // Add a new task locally\n    addTask: (state, action) => {\n      state.list.push({\n        ...action.payload,\n        id: Date.now()\n      }); // Generate unique ID\n    },\n    // Edit an existing task locally\n    editTask: (state, action) => {\n      const {\n        id,\n        updatedTask\n      } = action.payload;\n      const index = state.list.findIndex(task => task.id === id);\n      if (index !== -1) {\n        state.list[index] = {\n          ...state.list[index],\n          ...updatedTask\n        };\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTasksFromAPI.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchTasksFromAPI.fulfilled, (state, action) => {\n      state.list = action.payload;\n      state.loading = false;\n    }).addCase(fetchTasksFromAPI.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  addTask,\n  editTask\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","fetchTasksFromAPI","_","rejectWithValue","response","get","data","slice","error","message","tasksSlice","name","initialState","list","loading","reducers","addTask","state","action","push","payload","id","Date","now","editTask","updatedTask","index","findIndex","task","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["D:/task/my-react-app/src/redux/taskslice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"https://jsonplaceholder.typicode.com/todos\";\r\n\r\n// Fetch tasks from the dummy API\r\nexport const fetchTasksFromAPI = createAsyncThunk(\r\n  \"tasks/fetchTasks\",\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get(API_URL);\r\n      return response.data.slice(0, 10); // Fetch first 10 tasks\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    list: [],\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Add a new task locally\r\n    addTask: (state, action) => {\r\n      state.list.push({ ...action.payload, id: Date.now() }); // Generate unique ID\r\n    },\r\n    // Edit an existing task locally\r\n    editTask: (state, action) => {\r\n      const { id, updatedTask } = action.payload;\r\n      const index = state.list.findIndex((task) => task.id === id);\r\n      if (index !== -1) {\r\n        state.list[index] = { ...state.list[index], ...updatedTask };\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchTasksFromAPI.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchTasksFromAPI.fulfilled, (state, action) => {\r\n        state.list = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchTasksFromAPI.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { addTask, editTask } = tasksSlice.actions;\r\nexport default tasksSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,4CAA4C;;AAE5D;AACA,OAAO,MAAMC,iBAAiB,GAAGH,gBAAgB,CAC/C,kBAAkB,EAClB,OAAOI,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,OAAO,CAAC;IACzC,OAAOI,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOL,eAAe,CAACK,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAED,MAAMC,UAAU,GAAGb,WAAW,CAAC;EAC7Bc,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE,KAAK;IACdN,KAAK,EAAE;EACT,CAAC;EACDO,QAAQ,EAAE;IACR;IACAC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACJ,IAAI,CAACM,IAAI,CAAC;QAAE,GAAGD,MAAM,CAACE,OAAO;QAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC;MAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;IACD;IACAC,QAAQ,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAM;QAAEG,EAAE;QAAEI;MAAY,CAAC,GAAGP,MAAM,CAACE,OAAO;MAC1C,MAAMM,KAAK,GAAGT,KAAK,CAACJ,IAAI,CAACc,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACP,EAAE,KAAKA,EAAE,CAAC;MAC5D,IAAIK,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBT,KAAK,CAACJ,IAAI,CAACa,KAAK,CAAC,GAAG;UAAE,GAAGT,KAAK,CAACJ,IAAI,CAACa,KAAK,CAAC;UAAE,GAAGD;QAAY,CAAC;MAC9D;IACF;EACF,CAAC;EACDI,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC9B,iBAAiB,CAAC+B,OAAO,EAAGf,KAAK,IAAK;MAC7CA,KAAK,CAACH,OAAO,GAAG,IAAI;MACpBG,KAAK,CAACT,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDuB,OAAO,CAAC9B,iBAAiB,CAACgC,SAAS,EAAE,CAAChB,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACJ,IAAI,GAAGK,MAAM,CAACE,OAAO;MAC3BH,KAAK,CAACH,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC,CACDiB,OAAO,CAAC9B,iBAAiB,CAACiC,QAAQ,EAAE,CAACjB,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACH,OAAO,GAAG,KAAK;MACrBG,KAAK,CAACT,KAAK,GAAGU,MAAM,CAACE,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEJ,OAAO;EAAEQ;AAAS,CAAC,GAAGd,UAAU,CAACyB,OAAO;AACvD,eAAezB,UAAU,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}